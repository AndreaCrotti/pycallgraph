#!/usr/bin/env python
"""
pycallgraph
This script is the command line interface to the pycallgraph make_dot_graph
method.

U{http://pycallgraph.slowchop.com/}

Copyright Gerald Kaszuba 2007

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
"""

import os

from sys import exit, argv
from argparse import ArgumentParser

import pycallgraph


def parse_arguments(args):
    parser = ArgumentParser(description='generate a callgraph of the given program')

    parser.add_argument(
        '-o', '--output-file', default='pycallgraph.png',
        help='The generated GraphViz image')

    parser.add_argument(
        '-f', '--image-format', default='png',
        help='The image format of imagefile.')

    parser.add_argument(
        '-q', '--quiet', action='store_true',
        help='Suppress status output to the console.')

    parser.add_argument(
        '-t', '--tool', default='dot',
        help='The tool from Graphviz to use.')

    parser.add_argument(
        '-s', '--stdlib', action='store_true',
        default=False,
        help='Include standard library functions in the trace.')

    parser.add_argument(
        '-i', '--include', nargs='*',
        help='Wildcard pattern of modules to include in the output. ' \
            'You can have multiple include arguments.')

    parser.add_argument(
        '-e', '--exclude', nargs='*',
        action='append',
        help='Wildcard pattern of modules to exclude in the output. ' \
            'You can have multiple exclude arguments.')

    parser.add_argument(
        '-d', '--max-depth',
        default=None,
        help='Maximum stack depth to trace.')

    parser.add_argument(
        '--include-timing',
        nargs='*',
        help='Wildcard pattern of modules to include in time measurement. ' \
        'You can have multiple include arguments.')

    parser.add_argument(
        '--exclude-timing',
        nargs='*',
        help='Wildcard pattern of modules to exclude in time measurement. ' \
            'You can have multiple exclude arguments.')
    

    return parser.parse_args(args)


def main():
    ns = parse_arguments(argv[1:])

    if not options.include:
        options.include = ['*']

    filter_func = pycallgraph.GlobbingFilter(
        include=options.include,
        exclude=options.exclude,
        max_depth=options.max_depth,
    )

# Create timing filter
    if not options.include_timing:
        options.include_timing = ['*']

    time_filter_func = pycallgraph.GlobbingFilter(
        include=options.include_timing,
        exclude=options.exclude_timing,
    )

    pycallgraph.settings['include_stdlib'] = options.include_stdlib

# Remove this script from the argument list so we don't break the Python
# script we are calling.
    sys.argv = args

# Sometimes scripts change "options", so use a secret one.
# Also, this (kind of) allows pygc to call itself, since calling itself would
# overwrite global variables in this file.
    try:
        __pygc_options.append(options)
    except NameError:
        __pygc_options = [options]

# Insert the current working directory into the path
    sys.path.insert(0, os.getcwd())

    if not options.quiet:
        print('Starting trace')

    reraise = False

    pycallgraph.start_trace(
        filter_func=filter_func,
        time_filter_func=time_filter_func,
    )

    try:
        execfile(args[0])
    except SystemExit, e:
        # Ignore it when the script calls os.exit() so we can still make the graph.
        pass
    except Exception, e:
        reraise = True
        if not options.quiet:
            print('Caught exception, will raise after graph is made.')

    options = __pygc_options.pop()

    if not options.quiet:
        print('Creating %s' % options.output_file)

    pycallgraph.make_dot_graph(options.output_file, options.format, options.tool)

    if reraise:
        if not options.quiet:
            print('Done and raising the caught exception:')
        raise

    if not options.quiet:
        print('Done!')

if __name__ == '__main__':
    main()
